#ifndef CLASSFILE_H_
#define CLASSFILE_H_

/*
 * Definição dos tamanhos de bytes lidos do arquivo .class.
 */
typedef unsigned char 		u1;
typedef unsigned short 		u2;
typedef unsigned int 		u4;
typedef unsigned long long 	u8;

//Tabela de tipos de array
#define T_BOOLEAN	4
#define T_CHAR     	5
#define T_FLOAT 	6
#define T_DOUBLE 	7
#define T_BYTE      8
#define T_SHORT 	9
#define T_INT       10
#define T_LONG      11

//Tabela dos constant_infos
#define CONSTANT_Class					7
#define CONSTANT_FieldRef				9
#define CONSTANT_Methodref				10
#define CONSTANT_InterfaceMethodRef		11
#define CONSTANT_String					8
#define CONSTANT_Integer				3
#define CONSTANT_Float					4
#define CONSTANT_Long					5
#define CONSTANT_Double					6
#define CONSTANT_NameAndType			12
#define CONSTANT_UTF8					1
#define CONSTANT_MethodHandle			15
#define CONSTANT_MethodType				16
#define CONSTANT_InvokeDynamic			18

//Tabela dos access flags de classes
#define ACC_PUBLIC		0x0001	//Declared public; may be accessed from outside its package.
#define ACC_FINAL		0x0010	//Declared final; no subclasses allowed.
#define ACC_SUPER		0x0020	//Treat superclass methods specially when invoked by the invokespecial instruction.
#define ACC_INTERFACE	0x0200	//Is an interface, not a class.
#define ACC_ABSTRACT	0x0400	  //Declared abstract; must not be instantiated.
#define ACC_SYNTHETIC	0x1000	//Declared synthetic; not present in the source code.
#define ACC_ANNOTATION	0x2000 //	Declared as an annotation type.
#define ACC_ENUM		0x4000	//Declared as an enum type.
//Tabela dos access flags de campos (flags não definidas são aproveitadas da tabela de classes)
#define ACC_PRIVATE		0x0002	//Declared private;
#define ACC_PROTECTED	0x0004	//Declared protected;
#define ACC_STATIC		0x0008	//Declared static;
#define ACC_VOLATILE	0x0040	//Declared volatile;
#define ACC_TRANSIENT	0x0080	//Decalred transient;
//Tabela dos access flags de métodos (flags não definidas são aproveitadas das tabelas acima)
#define ACC_SYNCHRONIZED	0x0020	//Declared synchronized;
#define ACC_BRIDGE			0x0040	//Method generated by compiler;
#define ACC_VARARGS			0x0080	//Declared with variable number of arguments;
#define ACC_NATIVE			0x0100	//Declared native;
#define ACC_STRICT			0x0800	//Declared strict;
//Tags das verificacoes de variáveis
#define ITEM_Top				0
#define ITEM_Integer			1
#define ITEM_Float				2
#define ITEM_Double				3
#define ITEM_Long				4
#define ITEM_Null				5
#define ITEM_UninitializedThis	6
#define ITEM_Object				7
#define ITEM_Uninitialized		8

typedef union floatType 
{
	u4 bytes;
	float floatNumber;
} FloatType;

typedef union doubleType 
{
	u8 bytes;
	double doubleNumber;
} DoubleType;

/*
 * Union que indica os vários tipos possíveis da pool de constantes
 */
typedef union constantPoolConstType
{

	struct 
	{
		/*valor 7*/
		u2 nameIndex;
	} ClassInfo;

	struct 
	{
		/*valor 9*/
		u2 classIndex;
		u2 nameAndTypeIndex;
	} FieldRefInfo;

	struct 
	{
		/*valor 10*/
		u2 classIndex;
		u2 nameAndTypeIndex;
	} MethodRefInfo;

	struct 
	{
		/*valor 11*/
		u2 classIndex;
		u2 nameAndTypeIndex;
	} InterfaceMethodRefInfo;

	struct 
	{
		/*valor 8*/
		u2 stringIndex;
	} StringInfo;

	struct 
	{
		/*valor 3*/
		u4 bytes;
	} IntegerInfo;

	struct 
	{
		/*valor 4*/
		FloatType f;
	} FloatInfo;

	struct 
	{
		/*valor 6*/
		u8 bytes;
	} LongInfo;

	struct 
	{
		/*valor 6*/
		DoubleType d;
	} DoubleInfo;

	struct 
	{
		/*valor 12*/
		u2 nameIndex;
		u2 descriptorIndex;
	} NameAndTypeInfo;

	struct 
	{
		/*valor 11*/
		u2 length;
		u1 *bytes;
	} Utf8Info;

} ConstantPoolConstType;

/*
 * Estrutura da pool de constantes.
 */
typedef struct CcpInfo 
{
	u1 tag;
	ConstantPoolConstType info;
} CpInfo;

/*
 * Tabela de exceções, usada na parte de code de tipoAttributeInfo
 */
typedef struct exceptionTable 
{
	u2 startPC;
	u2 endPC;
	u2 handlerPC;
	u2 catchType;
} ExceptionTable;

/*
 * Estrutura usada para debuggar código de Java (provavelmente não é necessária na nossa implementação)
 */
typedef struct lineNumberTable 
{
	u2 startPC;
	u2 lineNumber;
} LineNumberTable;

typedef struct localVariableTable
{
	u2 attributeNameIndex;
	u2 length;
	u2 nameIndex;
	u2 descriptorIndex;
	u2 index;
} LocalVariableTable;


/*
 * Toda entrada CONSTANT_Class_info na constant_pool que representa uma classe ou interface C
 * que não é um membro do pacote deve ter exatamente uma entrada correspondente no array de classes.
 */
typedef struct innerClass
{
	u2 innerClassInfoIndex;
	u2 outerClassInfoIndex;
	u2 innerNameIndex;
	u2 innerClassAccessFlags;
} InnerClass;

/*
 * Um atributo da classe, seja método, constante, membro, etc.
 */
typedef struct attributeInfo 
{
	u2 attributeNameIndex;
	u4 attributeLength;
	union 
	{
		struct 
		{
			u2 constantValueIndex;	//Índice válido para a constant pool
		} ConstantValueAttribute;

		struct 
		{
			u2 maxStack;
			u2 maxLocals;
			u4 codeLength;
			u1 *code;
			u2 exceptionTableLength;
			ExceptionTable *exceptionTable;
			u2 attributesCount;
			struct attributeInfo *attributes;	//Tamanho: attributesCount
		} CodeAttribute;

		struct
		{
		} DeprecatedAttribute;

		struct 
		{
			u2 numberOfExceptions;
			u2 *exceptionIndexTable;	//Tamanho: numberOfExceptions
		} ExceptionsAttribute;

		struct 
		{
		} SyntheticAttribute;

		struct 
		{
			u2 numberOfClasses;
			InnerClass *classes;	//Tamanho: numberOfClasses
		} InnerClassAttribute;

		struct
		{
			u2 lineNumberTableLength;
			LineNumberTable *lineNumberTable;
		} LineNumberTableAttribute;

		struct
		{
			u2 localVariableTableLength;
			LocalVariableTable *localVariableTable;
		} LocalVariableTableAttribute;

		struct 
		{
			u2 sourceFileIndex;	//Índice valido para a constant pool
		} SourceFileAttribute;

		struct 
		{
			u1 *info;
		} UnknownAttribute;
	} AttributeType;

} AttributeInfo;

/*
 * Informações sobre campos de classes
 */
typedef struct fieldInfo 
{
	u2 accessFlags;
	u2 nameIndex;
	u2 descriptorIndex;
	u2 attributesCount;
	AttributeInfo *attributes;	//Tamanho: attributesCount
} FieldInfo;

/*
 * Estrutura que descreve os métodos da class
 */
typedef struct methodInfo 
{
	u2 accessFlags;
	u2 nameIndex;
	u2 descriptorIndex;
	u2 attributesCount;
	AttributeInfo *attributes;	//Tamanho: attributesCount
} MethodInfo;

/*
 * Estrutura de topo, dela saem todas as outras.
 */
typedef struct classFile 
{
	u4 				magic;
	u2 				minorVersion;
	u2 				majorVersion;
	u2 				constantPoolCount; 
	CpInfo 			*constantPool;
	u2 				accessFlags; 
	u2 				thisClass; 
	u2 				superClass; 
	u2 				interfacesCount;
	u2 				*interfaces;
	u2 				fieldsCount; 	
	FieldInfo 		*fields; 
	u2 				methodsCount;
	MethodInfo 		*methods; 
	u2 				attributesCount; 
	AttributeInfo 	*attributes;
} ClassFile;

#endif /* CLASSFILE_H_ */
